// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enerator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        Int        @id @default(autoincrement())
  name      String
  employees Employee[]
  positions Position[]
}

model Employee {
  id         Int        @id @default(autoincrement())
  companyId  Int
  name       String
  email      String     @unique
  role       String?
  isActive   Boolean    @default(true)
  company    Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  interviews Interview[]
}

model InterviewFlow {
  id          Int             @id @default(autoincrement())
  description String
  positions   Position[]
  steps       InterviewStep[]
}

model Position {
  id                  Int             @id @default(autoincrement())
  companyId           Int
  interviewFlowId     Int?
  title               String
  description         String?
  status              String
  isVisible           Boolean        @default(true)
  location            String?
  jobDescription      String?
  requirements        String?
  responsibilities    String?
  salaryMin           Decimal?
  salaryMax           Decimal?
  employmentType      String?
  benefits            String?
  companyDescription  String?
  applicationDeadline DateTime?
  contactInfo         String?
  company             Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  interviewFlow       InterviewFlow? @relation(fields: [interviewFlowId], references: [id])
  applications        Application[]
}

model InterviewType {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  steps       InterviewStep[]
}

model InterviewStep {
  id               Int             @id @default(autoincrement())
  interviewFlowId  Int
  interviewTypeId  Int
  name             String
  orderIndex       Int
  interviewFlow    InterviewFlow  @relation(fields: [interviewFlowId], references: [id], onDelete: Cascade)
  interviewType    InterviewType  @relation(fields: [interviewTypeId], references: [id])
  interviews       Interview[]
}

model Candidate {
  id        Int           @id @default(autoincrement())
  firstName String
  lastName  String
  email     String        @unique
  phone     String?
  address   String?
  applications Application[]
}

model Application {
  id              Int           @id @default(autoincrement())
  positionId      Int
  candidateId     Int
  applicationDate DateTime      @default(now())
  status          String
  notes           String?
  position        Position      @relation(fields: [positionId], references: [id], onDelete: Cascade)
  candidate       Candidate     @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  interviews      Interview[]
}

model Interview {
  id              Int            @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int?
  interviewDate   DateTime
  result          String?
  score           Int?
  notes           String?
  application     Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  interviewStep   InterviewStep  @relation(fields: [interviewStepId], references: [id], onDelete: Cascade)
  employee        Employee?      @relation(fields: [employeeId], references: [id], onDelete: SetNull)
}


// Adicionales prompts 3

model EmploymentType {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  positions Position[]
}

model ApplicationStatus {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  applications Application[]
  logs      ApplicationLog[]
}

model InterviewResult {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  interviews Interview[]
}

model Benefit {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  positions PositionBenefit[]
}

model PositionBenefit {
  positionId Int
  benefitId  Int
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
  benefit    Benefit  @relation(fields: [benefitId], references: [id], onDelete: Cascade)
  @@id([positionId, benefitId])
}

model Tag {
  id       Int             @id @default(autoincrement())
  name     String          @unique
  positions PositionTag[]
}

model PositionTag {
  positionId Int
  tagId      Int
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  @@id([positionId, tagId])
}

model ApplicationLog {
  id             Int               @id @default(autoincrement())
  applicationId  Int
  statusId       Int
  changedAt      DateTime          @default(now())
  notes          String?
  application    Application       @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  status         ApplicationStatus @relation(fields: [statusId], references: [id])
}

model Position {
  id                  Int              @id @default(autoincrement())
  companyId           Int
  interviewFlowId     Int?
  title               String
  description         String?
  status              String          // Refactor to statusId if needed
  isVisible           Boolean         @default(true)
  location            String?
  jobDescription      String?
  requirements        String?
  responsibilities    String?
  salaryMin           Decimal?
  salaryMax           Decimal?
  employmentTypeId    Int?
  companyDescription  String?
  applicationDeadline DateTime?
  contactInfo         String?
  company             Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  interviewFlow       InterviewFlow?  @relation(fields: [interviewFlowId], references: [id])
  employmentType      EmploymentType? @relation(fields: [employmentTypeId], references: [id])
  applications        Application[]
  benefits            PositionBenefit[]
  tags                PositionTag[]
}

model Interview {
  id              Int             @id @default(autoincrement())
  applicationId   Int
  interviewStepId Int
  employeeId      Int?
  interviewDate   DateTime
  resultId        Int?
  score           Int?
  notes           String?
  application     Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  interviewStep   InterviewStep   @relation(fields: [interviewStepId], references: [id], onDelete: Cascade)
  employee        Employee?       @relation(fields: [employeeId], references: [id], onDelete: SetNull)
  result          InterviewResult? @relation(fields: [resultId], references: [id])
}